pipeline
{
    options
    {
        buildDiscarder(logRotator(numToKeepStr: '3'))
    }
    agent any
    environment 
    {
        VERSION = 'latest'
        PROJECT = 'cicdtest'
        ECRIMAGE = '234232853477.dkr.ecr.ap-northeast-1.amazonaws.com/cicdtest:latest'
        //因為 Jenkins 沒安裝 ECR plugin，所以先不用以下兩個變數
        // ECRURL = 'http://234232853477.dkr.ecr.ap-northeast-1.amazonaws.com/cicdtest'
        // ECRCRED = 'ecr:ap-norhteast-1:tap_ecr'
        ECRURI = '234232853477.dkr.ecr.ap-northeast-1.amazonaws.com/cicdtest'
        ECRIMAGEDEV = '234232853477.dkr.ecr.ap-northeast-1.amazonaws.com/cicdtest:dev'
        MESSAGE = ''
    }
    stages
    {
        stage('Build preparations')
        {
            steps
            {
                script 
                {
                    // ECR login
                    sh 'aws ecr get-login-password --region ap-northeast-1 | docker login --username AWS --password-stdin 234232853477.dkr.ecr.ap-northeast-1.amazonaws.com'
                    if ( params.tag == 'dev') {
                        // calculate GIT lastest commit short-hash
                        gitCommitShortHash = sh(returnStdout: true, script: 'git log -1 --format=%h').trim()
                        // calculate a sample version tag
                        VERSION = gitCommitShortHash
                    } else {
                        VERSION == params.tag
                    }
                    // set the build display name
                    currentBuild.displayName = "#${BUILD_ID}-${VERSION}"
                    ECRIMAGE = "$ECRURI:$VERSION"

                }
            }
        }

        stage('Docker build') {

            when {
                equals expected: 'dev', actual: params.tag
            }

            steps {
                script {
                    // Build the docker image using a Dockerfile
                    docker.build("$ECRIMAGE","./")
                }
            }
        }

        stage('Docker pull') {

            when {
                not { params.tag == 'dev' }
            }

            steps {
                script {
                    // Pull the docker image from ECR
                    docker.pull("$ECRIMAGE")
                }
            }
        }

        stage('Docker push') {
            steps {
                script {
                    // login to ECR - for now it seems that that the ECR Jenkins plugin is not performing the login as expected. I hope it will in the future.
                    // Push the Docker image to ECR
                    sh "docker tag $ECRIMAGE  $ECRIMAGEDEV"
                    sh "docker push $ECRIMAGE"
                    sh "docker push $ECRIMAGEDEV"
                    // 因為 Jenkins 沒安裝 ECR plugin，所以先不用以下指令推版
                    // docker.withRegistry(ECRURL, ECRCRED)
                    // {
                    //     docker.image(ECRIMAGE).push()
                    // }
                }
            }
        }
    }

    post {
        
        success {
        
            if (params.tag == 'dev') {
                MESSAGE = "SUCCESSFUL: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]', COMMIT: '${env.VERSION}', (${env.BUILD_URL})"
            } else {
                MESSAGE = "ROLLBACK SUCCESSFUL: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]', COMMIT: '${env.VERSION}', (${env.BUILD_URL})"
            }

            slackSend (channel: '#fe-cicd', color: '#00FF00', message: MESSAGE)
        }

        failure {

            if (params.tag == 'dev') {
                MESSAGE = "FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' , COMMIT: '${env.VERSION}', (${env.BUILD_URL})"
            } else {
                MESSAGE = "ROLLBACK FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' , COMMIT: '${env.VERSION}', (${env.BUILD_URL})"
            }

            slackSend (channel: '#fe-cicd', color: '#FF0000', message: MESSAGE)
        }
    } 
} 